#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

resource_dir=$(dirname $0)

source $resource_dir/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

cd $source

payload=$(mktemp $TMPDIR/artifactory-resource-request.XXXXXX)

cat > $payload <&0

endpoint=$(jq -r '.source.endpoint // ""' < $payload)
regex=$(jq -r '.source.regex // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // ""' < $payload)
disable_redeploy=$(jq -r '.source.disable_redeploy // ""' < $payload)

repository=$(jq -r '.source.repository // ""' < $payload)
folder=$(jq -r '.params.folder // ""' < $payload)
file=$(jq -r '.params.file // ""' < $payload)
paramRegex=$(jq -r '.params.regex // ""' < $payload)

if [ -z "$endpoint" ]; then
  echo "invalid payload (missing endpoint)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

if [ -z "$file" ]; then
  echo "invalid payload (missing file)"
  exit 1
fi

abs_file=$(ls $file)
filename=$(basename "$abs_file")
# echo $file $regex
version=$(applyRegex_version $regex $filename)

# artifactory/maven repo layout
# [org]/[module]/[baseRev](-[folderItegRev])/[module]-[baseRev](-[fileItegRev])(-[classifier]).[ext]
# org = $repository, i.e. "com/acme"
# module = $folder
# baseRev = regexed version, i.e. "0.1"
args_url="$endpoint"
args_url="$args_url$repository"

if [ -n "$folder" ]; then
	echo "adding parameter folder"
	args_url="$args_url/$folder"
fi

args_url="$args_url/$version"

args_url="$args_url/$filename"

args_security=

[ -n "$username" ] && args_security="-u $username";
[ -n "$password" ] && args_security="$args_security:$password";
trueValue="true"
[ -n "$skip_ssl_verification" ] && [ "${skip_ssl_verification,,}" = "${trueValue,,}" ] && args_security="$args_security -k";

# echo "########## $filename, $file"

if [ "$disable_redeploy" = "true" ]; then
  foundVersions=$(jq -n \
  --arg endpoint "$endpoint" \
  --arg regex "$regex" \
  --arg username "$username" \
  --arg password "$password" \
  --arg skip_ssl_verification "$skip_ssl_verification" \
  --arg repository "$repository" \
  --arg file "$file" \
  --arg folder "$folder" \
  --arg paramRegex "$paramRegex" \
  --arg version "$version" \
  '{
    version: {
      version: $version
    },
    source: {
      endpoint: $endpoint,
      regex: $regex,
      username: $username,
      password: $password,
      skip_ssl_verification: $skip_ssl_verification,
      repository: $repository
    },
    params: {
      file: $file,
      folder: $folder,
      regex: $paramRegex
    }
  }' | $resource_dir/check "$source" | jq -r '.[].version')

  for foundVersion in $foundVersions; do
    if [ "$version" = "$foundVersion" ]; then
      echo "Skipping deploy because disable_redeploy is enabled and a file matching version of $version is already deployed."
      jq -n --arg version "$version" '{ version: {version: $version} }' >&3
      exit 0
    fi
  done
fi

# NOTE: X-Checksum-Sha256 is currently broken. See https://www.jfrog.com/jira/browse/RTFACT-9871
args_checksums=" \
--header X-Checksum-MD5:$(md5sum $abs_file | awk '{print $1}') \
--header X-Checksum-Sha1:$(sha1sum -a 1 $abs_file | awk '{ print $1 }') \
";

# echo $args_security $args_checksums "-T$abs_file" "$args_url"
curl $args_security $args_checksums "-T$abs_file" "$args_url"

jq -n "{
  version: {version: $(echo $version | jq -R .)}
}" >&3

